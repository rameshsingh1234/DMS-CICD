name: API Testing
on:
  push:
    branches:
      - main

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Test and Scan the APIs
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Create generate_zap_scan_steps.py
        run: |
          echo "import csv" > generate_zap_scan_steps.py
          echo "import json" >> generate_zap_scan_steps.py
          echo "" >> generate_zap_scan_steps.py
          echo "steps = []" >> generate_zap_scan_steps.py
          echo "" >> generate_zap_scan_steps.py
          echo "with open('Testdata/endpoints.csv') as csvfile:" >> generate_zap_scan_steps.py
          echo "    reader = csv.DictReader(csvfile)" >> generate_zap_scan_steps.py
          echo "    for row in reader:" >> generate_zap_scan_steps.py
          echo "        url = row['url']" >> generate_zap_scan_steps.py
          echo "        steps.append({" >> generate_zap_scan_steps.py
          echo "            'name': f\"ZAP Scan {url}\"," >> generate_zap_scan_steps.py
          echo "            'uses': 'zaproxy/action-api-scan@v0.7.0'," >> generate_zap_scan_steps.py
          echo "            'with': {" >> generate_zap_scan_steps.py
          echo "                'token': '\${{ secrets.GITHUB_TOKEN }}'," >> generate_zap_scan_steps.py
          echo "                'docker_name': 'ghcr.io/zaproxy/zaproxy:stable'," >> generate_zap_scan_steps.py
          echo "                'format': 'openapi'," >> generate_zap_scan_steps.py
          echo "                'target': url," >> generate_zap_scan_steps.py
          echo "                'cmd_options': '-J report_json.json -w report_md.md -r report_html.html -a'" >> generate_zap_scan_steps.py
          echo "            }" >> generate_zap_scan_steps.py
          echo "        })" >> generate_zap_scan_steps.py
          echo "" >> generate_zap_scan_steps.py
          echo "with open('dynamic_steps.json', 'w') as f:" >> generate_zap_scan_steps.py
          echo "    json.dump(steps, f)" >> generate_zap_scan_steps.py

      - name: Generate ZAP Scan Steps
        run: python generate_zap_scan_steps.py

      - name: Run Dynamic ZAP Scan Steps
        run: |
          steps=$(cat dynamic_steps.json)
          for step in $(echo "${steps}" | jq -c '.[]'); do
            name=$(echo $step | jq -r '.name')
            uses=$(echo $step | jq -r '.uses')
            token=$(echo $step | jq -r '.with.token')
            docker_name=$(echo $step | jq -r '.with.docker_name')
            format=$(echo $step | jq -r '.with.format')
            target=$(echo $step | jq -r '.with.target')
            cmd_options=$(echo $step | jq -r '.with.cmd_options')

            echo "Running $name"
            echo "uses: $uses"
            echo "with:"
            echo "  token: $token"
            echo "  docker_name: $docker_name"
            echo "  format: $format"
            echo "  target: $target"
            echo "  cmd_options: $cmd_options"

            - name: $name
              uses: $uses
              with:
                token: $token
                docker_name: $docker_name
                format: $format
                target: $target
                cmd_options: $cmd_options
          done

      - name: Run Pytest
        run: pytest ./TestScript/Test_app.py --html-report=./reports/Pytest_report.html

#      - name: Attach the Test Report to Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test Report
#          path: reports/Pytest_report.html
#
#      - name: Attach the ZAP Report to Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test Report
#          path: report_html.html
#
#      - name: Test directory
#        run: pwd
#
#      - name: Test
#        run: ls
#
#      - name: Attach the Test Logs to Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test Log
#          path: Logs/test.log
#
#      - name: Configure Gmail and Send Email
#        env:
#          GMAIL_USERNAME: ${{secrets.GMAIL_USERNAME}}
#          GMAIL_PASSWORD: ${{secrets.GMAIL_PASSWORD}}
#          RECIPIENT_EMAIL: ${{secrets.RECIPIENT_EMAIL}}
#        run: |
#          python Utilities/send_email_script.py $GMAIL_USERNAME $GMAIL_PASSWORD $RECIPIENT_EMAIL
