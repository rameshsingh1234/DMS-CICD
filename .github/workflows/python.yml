name: API Testing
on:
  push:
    branches:
      - main

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Test and Scan the APIs
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Verify Testdata Directory
        run: |
          if [ -d "Testdata" ]; then
            echo "Testdata directory exists."
          else
            echo "Testdata directory does not exist."
          fi

      - name: List Contents of Testdata Directory
        run: |
          if [ -d "Testdata" ]; then
            ls Testdata
          fi

      - name: Create generate_zap_scan_steps_and_execute.py
        run: |
          echo "import csv" > generate_zap_scan_steps_and_execute.py
          echo "import json" >> generate_zap_scan_steps_and_execute.py
          echo "import subprocess" >> generate_zap_scan_steps_and_execute.py
          echo "" >> generate_zap_scan_steps_and_execute.py
          echo "steps = []" >> generate_zap_scan_steps_and_execute.py
          echo "" >> generate_zap_scan_steps_and_execute.py
          echo "with open('Testdata/endpoint.csv', newline='', encoding='utf-8-sig') as csvfile:" >> generate_zap_scan_steps_and_execute.py
          echo "    reader = csv.DictReader(csvfile)" >> generate_zap_scan_steps_and_execute.py
          echo "    headers = reader.fieldnames" >> generate_zap_scan_steps_and_execute.py
          echo "    print(f\"CSV Headers: {headers}\")" >> generate_zap_scan_steps_and_execute.py
          echo "    if 'url' not in headers:" >> generate_zap_scan_steps_and_execute.py
          echo "        raise KeyError(\"'url' column is missing from CSV file\")" >> generate_zap_scan_steps_and_execute.py
          echo "    for row in reader:" >> generate_zap_scan_steps_and_execute.py
          echo "        url = row['url']" >> generate_zap_scan_steps_and_execute.py
          echo "        steps.append({" >> generate_zap_scan_steps_and_execute.py
          echo "            'name': f\"ZAP Scan {url}\"," >> generate_zap_scan_steps_and_execute.py
          echo "            'uses': 'zaproxy/action-api-scan@v0.7.0'," >> generate_zap_scan_steps_and_execute.py
          echo "            'with': {" >> generate_zap_scan_steps_and_execute.py
          echo "                'token': '\${{ secrets.GITHUB_TOKEN }}'," >> generate_zap_scan_steps_and_execute.py
          echo "                'docker_name': 'ghcr.io/zaproxy/zaproxy:stable'," >> generate_zap_scan_steps_and_execute.py
          echo "                'format': 'openapi'," >> generate_zap_scan_steps_and_execute.py
          echo "                'target': url," >> generate_zap_scan_steps_and_execute.py
          echo "                'cmd_options': '-J /zap/report_json.json -w /zap/report_md.md -r /zap/report_html.html -a'" >> generate_zap_scan_steps_and_execute.py
          echo "            }" >> generate_zap_scan_steps_and_execute.py
          echo "        })" >> generate_zap_scan_steps_and_execute.py
          echo "" >> generate_zap_scan_steps_and_execute.py
          echo "# Save the steps to a JSON file (for debugging or future use)" >> generate_zap_scan_steps_and_execute.py
          echo "with open('dynamic_steps.json', 'w') as f:" >> generate_zap_scan_steps_and_execute.py
          echo "    json.dump(steps, f)" >> generate_zap_scan_steps_and_execute.py
          echo "" >> generate_zap_scan_steps_and_execute.py
          echo "# Execute each step" >> generate_zap_scan_steps_and_execute.py
          echo "for step in steps:" >> generate_zap_scan_steps_and_execute.py
          echo "    name = step['name']" >> generate_zap_scan_steps_and_execute.py
          echo "    uses = step['uses']" >> generate_zap_scan_steps_and_execute.py
          echo "    token = step['with']['token']" >> generate_zap_scan_steps_and_execute.py
          echo "    docker_name = step['with']['docker_name']" >> generate_zap_scan_steps_and_execute.py
          echo "    format = step['with']['format']" >> generate_zap_scan_steps_and_execute.py
          echo "    target = step['with']['target']" >> generate_zap_scan_steps_and_execute.py
          echo "    cmd_options = step['with']['cmd_options']" >> generate_zap_scan_steps_and_execute.py
          echo "" >> generate_zap_scan_steps_and_execute.py
          echo "    print(f\"Running {name}\")" >> generate_zap_scan_steps_and_execute.py
          echo "    command = f\"docker run --rm -v $(pwd):/zap/wrk/:rw -t {docker_name} zap-api-scan.py -t {target} -f {format} {cmd_options}\"" >> generate_zap_scan_steps_and_execute.py
          echo "    try:" >> generate_zap_scan_steps_and_execute.py
          echo "        subprocess.run(command, shell=True, check=True)" >> generate_zap_scan_steps_and_execute.py
          echo "    except subprocess.CalledProcessError as e:" >> generate_zap_scan_steps_and_execute.py
          echo "        print(f\"ZAP scan for {target} failed with exit code {e.returncode}\")" >> generate_zap_scan_steps_and_execute.py
          echo "        print(\"Output:\", e.output)" >> generate_zap_scan_steps_and_execute.py
          echo "        print(\"Error:\", e.stderr)" >> generate_zap_scan_steps_and_execute.py

      - name: Generate and Execute ZAP Scan Steps
        run: python generate_zap_scan_steps_and_execute.py

      - name: Run Pytest
        run: pytest ./TestScript/Test_app.py --html-report=./reports/Pytest_report.html

#      - name: Attach the Test Report to Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test Report
#          path: reports/Pytest_report.html
#
#      - name: Attach the ZAP Report to Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name
