name: API Testing
#test1
on:
  push:
    branches:
      - main

jobs:
#  zap_scan:
#    runs-on: ubuntu-latest
#    name: Test and Scan the APIs
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          ref: main
#
#      - name: ZAP Scan
#        uses: zaproxy/action-api-scan@v0.7.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
#          format: openapi
#          target: 'https://npdlqpxkb7.execute-api.ap-south-1.amazonaws.com/switch2/pnotif'
#          custom_headers: |
#            iid: 197
#            iid: 218192
#          cmd_options: >
#            -m POST
#            -d '{"data":"VSpCIOGSI3DX/16Os0QOaYdTBA4oZ9Sut+KELT4V1B/Xr60DQ3pnFnE81JKND0x8z5iLUoK0OG8cC2MEmT5AKMlYiTxNWU3AlFXF6ol30yWiIjyVod21OEEkhQetrIWT8jy3ebAweWjT1csPPzY7kKE6jpRYkMvnDDR+o3ggoL5iAqO8UM31guZ1zkQMGstDLrzCxAGCjgNtI7aXiRBj1+bxPgJ1"}'
#            -J report_json.json
#            -w report_md.md
#            -r report_html.html
#            -a
#
#      - name: Attach the Zap Report To Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Zap Report
#          path: report_html.html
#
#      - name: Test directory
#        run: pwd
#
#      - name: Test
#        run: ls
#
#      - name: Configure Gmail and Send Email
#        env:
#          GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
#          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
#          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}  # Replace with the recipient's email
#        run: |
#          python Utilities/send_email_script.py $GMAIL_USERNAME $GMAIL_PASSWORD $RECIPIENT_EMAIL

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          check-latest: true

      - name: Verify Java Version
        run: java -version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Pull SonarQube Docker image
        run: |
          docker pull ramesh2428/sonarqube-custom:latest

      - name: Run SonarQube Docker container with Java 17
        run: |
          docker run -d --name sonarqube -p 9000:9000 \
            -e JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 \
            -e PATH="/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" \
            ramesh2428/sonarqube-custom:latest /bin/bash -c "
            apt-get update && \
            apt-get install -y openjdk-17-jdk && \
            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 && \
            export PATH=$JAVA_HOME/bin:$PATH && \
            echo 'Waiting for SonarQube to start...' && \
            for i in {1..60}; do
              STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
              if [ \"$STATUS\" == \"UP\" ]; then
                echo 'SonarQube is up and running!'
                break
              else
                echo 'SonarQube status: $STATUS. Waiting...'
                sleep 10
              fi
            done
          "

      - name: Change SonarQube Admin Password
        run: |
          NEW_PASSWORD="Test@2428"
          curl -u admin:admin -X POST "http://localhost:9000/api/users/change_password" \
            -d "login=admin&previousPassword=admin&password=${NEW_PASSWORD}"
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}

      - name: Install SonarQube Scanner
        run: |
          # Download and unzip the SonarQube Scanner
          curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli.zip
          # Move the extracted directory to a known location
          mv sonar-scanner-4.8.0.2856-linux sonar-scanner
          # Add the scanner to the PATH
          echo "${PWD}/sonar-scanner/bin" >> $GITHUB_PATH
          # Set JAVA_HOME explicitly to Java 17
          echo "JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64" >> $GITHUB_ENV
          echo "PATH=/usr/lib/jvm/temurin-17-jdk-amd64/bin:${PWD}/sonar-scanner/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      - name: Verify SonarQube Scanner Installation
        run: |
          echo "Using Java version:"
          java -version
          echo "Using SonarQube Scanner version:"
          sonar-scanner --version
        env:
          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
          PATH: /usr/lib/jvm/temurin-17-jdk-amd64/bin:${{ env.PATH }}
        shell: bash

      - name: Login to SonarQube and Generate Token
        id: generate_token
        run: |
          # Use the new password to login and generate the token
          NEW_PASSWORD="Test@2428"
          TOKEN_NAME="github_actions_token"
          RESPONSE=$(curl -u admin:$NEW_PASSWORD -X POST "http://localhost:9000/api/user_tokens/generate?name=${TOKEN_NAME}")

          # Extract the token from the response
          SONAR_TOKEN=$(echo $RESPONSE | jq -r '.token')

          # Mask the token output in GitHub Actions logs
          echo "::add-mask::$SONAR_TOKEN"

          # Set the token as an output variable
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
        shell: bash

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
          PATH: /usr/lib/jvm/temurin-17-jdk-amd64/bin:${{ env.PATH }}
        run: |
          sonar-scanner \
          -Dsonar.projectKey=my_project \
          -Dsonar.sources=. \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.projectVersion=1.0.0 \
          -Dsonar.language=java # Example of additional properties
        shell: bash

      - name: Generate SonarQube report
        run: |
          mkdir -p sonar-reports
          curl -u $SONAR_TOKEN: http://localhost:9000/api/issues/search?componentKeys=my_project > sonar-reports/sonar-report.json
          curl -u $SONAR_TOKEN: http://localhost:9000/api/measures/component_tree?component=my_project&metricKeys=code_smells,bugs,vulnerabilities > sonar-reports/sonar-measures.json

      - name: Stop SonarQube Docker container
        run: |
          docker stop sonarqube
          docker rm sonarqube

      - name: Upload SonarQube reports
        uses: actions/upload-artifact@v3
        with:
          name: sonar-reports
          path: sonar-reports































#  sonarcloud:
#      name: SonarCloud
#      runs-on: ubuntu-latest
#      steps:
#        - uses: actions/checkout@v3
#          with:
#            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#        - name: SonarCloud Scan
#          uses: SonarSource/sonarcloud-github-action@master
#          env:
#            GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}  # Needed to get PR information, if any
#            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#  sonarQube:
#    runs-on: ubuntu-latest
#
#    services:
#      sonarqube:
#        image: sonarqube:latest
#        ports:
#          - 9000:9000
#        options: --health-cmd="curl -f http://localhost:9000 || exit 1" --health-interval=10s --health-timeout=5s --health-retries=5
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Wait for SonarQube to be ready
#        run: |
#          echo "Waiting for SonarQube to be ready..."
#          timeout 60 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do sleep 5; done'
#
#      - name: Download SonarScanner compatible with Java 17
#        run: |
#          # Download the SonarScanner version that does not bundle its own JRE
#          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
#          unzip sonar-scanner.zip -d $HOME/sonar-scanner
#          echo "$HOME/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin" >> $GITHUB_PATH
#
#      - name: Run SonarQube Scanner
#        env:
#          SONAR_HOST_URL: http://localhost:9000
#          SONAR_TOKEN: ${{ secrets.DMS_TKN }}
#        run: |
#          sonar-scanner
























#name: API Testing
#on:
#  push:
#    branches:
#      - main
##test1
#jobs:
#  zap_scan:
#    runs-on: ubuntu-latest
#    name: Test and Scan the APIs
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          ref: main
#
#      - name: Setup Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: 3.9
#
#      - name: Install dependencies
#        run: |
#          pip install -r requirements.txt
#
#      - name: Test directory
#        run: pwd
#
#      - name: List files
#        run: ls
#
#      - name: Change directory
#        run: cd /home/runner/work/Sound_Box_CICD/
#
#      - name: Run Pytest
#       # run: pytest -v -s --capture=tee-sys ./TestScript/Test_app.py --html=./reports/report.html
#        run: pytest ./TestScript/Test_app.py --html=./reports/Pytest_report.html --self-contained-html --metadata Tested "Ramesh Singh"
##        # pytest --html=report.html --self-contained-html
#       # pytest --html=report.html --self-contained-html --metadata Tested "Ramesh Singh"
#
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Get Bearer Token
#        id: get_token
#        run: |
#         response=$(curl -X POST "https://bscytxzsc3.execute-api.ap-south-1.amazonaws.com/user/secrets" \
#          -H "Content-Type: application/json" \
#          -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJvSS14anVfTDRQSmhlTjk1dlVsRF9YZzBqbnhIVl8wTGpsVlVxYXRkV0FVIn0.eyJleHAiOjE3MjM4NzIyNDQsImlhdCI6MTcyMTcxMjI0NCwianRpIjoiNGU4NTExYmYtYjlkMC00N2RkLWJlNmEtZWM4MGI4NjFkNDRkIiwiaXNzIjoiaHR0cDovL2JzY3l0eHpzYzMuZXhlY3V0ZS1hcGkuYXAtc291dGgtMS5hbWF6b25hd3MuY29tL3JlYWxtcy9zb3VuZGJveCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJmZjY1MTY2NC0wZTExLTQ3MmMtYTAyMS0zYWUxMjljNzM4ZGEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzb3VuZGJveC1jbGkiLCJzZXNzaW9uX3N0YXRlIjoiZDE0ZjZlN2QtNzg0NC00MjVlLWIwNWItZmNkOWIxMjI0NDI2IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIvKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRlZmF1bHQtcm9sZXMtc291bmRib3giXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJkMTRmNmU3ZC03ODQ0LTQyNWUtYjA1Yi1mY2Q5YjEyMjQ0MjYiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6Imd1ZXN0dXNlciJ9.SJpuuUGwUCALetYTxwWEPmtXProf2NpePNaBbrCixWbSvfpO9jUiUhM9RaO305cJZq-uOE8s7RrgtkK2pn1q9S7xYsAb3XTK-ucjpjYuBbQ3WSErvGTQezoLUuBQaB8oyHyA-gEhB_wQ6pFwCp8PJUMvxT-4-lh8r9z3P72VZWFc8dKrWGkqwKiXEUPwpfkcrGhl5MBy1JahKc0ChYlgVFQztZwF8jlI_6HBDrJHNf95b5KJDHE9H0IbqJWkT12sfM5L8i5BO_18PEEShkJAn9YFZc5BQKlwNMChSYCKzv4RrxjpeOJUoJYWaEHvHEPxcJQ4p88g89nMB35fnVtPEg" \
#          -d '{"mobile_number": "9738350592","mpin": 1234}')
#         echo "TOKEN=$(echo $response | jq -r '.data.access_token')" >> $GITHUB_ENV
#
#      - name: Set Authentication Environment Variables
#       run: |
#        echo "ZAP_AUTH_HEADER=Authorization" >> $GITHUB_ENV
#        echo "ZAP_AUTH_HEADER_VALUE=Bearer ${{ env.TOKEN }}" >> $GITHUB_ENV
#        echo "ZAP_AUTH_HEADER_SITE=https://bscytxzsc3.execute-api.ap-south-1.amazonaws.com/payments/get" >> $GITHUB_ENV
#
#      - name: ZAP Scan
#        uses: zaproxy/action-api-scan@v0.7.0
#        with:
#         token: ${{ secrets.GITHUB_TOKEN }}
#         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
#         format: openapi
#         target: 'https://bscytxzsc3.execute-api.ap-south-1.amazonaws.com/payments/get'
#         cmd_options: '-J report_json.json -w report_md.md -r report_html.html -a'
#     env:
#        ZAP_AUTH_HEADER: ${{ env.ZAP_AUTH_HEADER }}
#        ZAP_AUTH_HEADER_VALUE: ${{ env.ZAP_AUTH_HEADER_VALUE }}
#        ZAP_AUTH_HEADER_SITE: ${{ env.ZAP_AUTH_HEADER_SITE }}
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
##      - name: Get Bearer Token
##        id: get_token
##        run: |
##              response=$(curl -X POST "https://bscytxzsc3.execute-api.ap-south-1.amazonaws.com/user/secrets" \
##               -H "Content-Type: application/json" \
##               -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJvSS14anVfTDRQSmhlTjk1dlVsRF9YZzBqbnhIVl8wTGpsVlVxYXRkV0FVIn0.eyJleHAiOjE3MjM4NzIyNDQsImlhdCI6MTcyMTcxMjI0NCwianRpIjoiNGU4NTExYmYtYjlkMC00N2RkLWJlNmEtZWM4MGI4NjFkNDRkIiwiaXNzIjoiaHR0cDovL2JzY3l0eHpzYzMuZXhlY3V0ZS1hcGkuYXAtc291dGgtMS5hbWF6b25hd3MuY29tL3JlYWxtcy9zb3VuZGJveCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJmZjY1MTY2NC0wZTExLTQ3MmMtYTAyMS0zYWUxMjljNzM4ZGEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzb3VuZGJveC1jbGkiLCJzZXNzaW9uX3N0YXRlIjoiZDE0ZjZlN2QtNzg0NC00MjVlLWIwNWItZmNkOWIxMjI0NDI2IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIvKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRlZmF1bHQtcm9sZXMtc291bmRib3giXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJkMTRmNmU3ZC03ODQ0LTQyNWUtYjA1Yi1mY2Q5YjEyMjQ0MjYiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6Imd1ZXN0dXNlciJ9.SJpuuUGwUCALetYTxwWEPmtXProf2NpePNaBbrCixWbSvfpO9jUiUhM9RaO305cJZq-uOE8s7RrgtkK2pn1q9S7xYsAb3XTK-ucjpjYuBbQ3WSErvGTQezoLUuBQaB8oyHyA-gEhB_wQ6pFwCp8PJUMvxT-4-lh8r9z3P72VZWFc8dKrWGkqwKiXEUPwpfkcrGhl5MBy1JahKc0ChYlgVFQztZwF8jlI_6HBDrJHNf95b5KJDHE9H0IbqJWkT12sfM5L8i5BO_18PEEShkJAn9YFZc5BQKlwNMChSYCKzv4RrxjpeOJUoJYWaEHvHEPxcJQ4p88g89nMB35fnVtPEg" \
##               -d '{"mobile_number": "9738350592","mpin": 1234}')
##                echo "TOKEN=$(echo $response | jq -r '.data.access_token')" >> $GITHUB_ENV
##
##      - name: ZAP Scan
##        uses: zaproxy/action-api-scan@v0.7.0
##        with:
##         token: ${{ secrets.GITHUB_TOKEN }}
##         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
##         format: openapi
##         target: 'https://bscytxzsc3.execute-api.ap-south-1.amazonaws.com/payments/get'
##         cmd_options: '-J report_json.json -w report_md.md -r report_html.html -a -z "authHeader=Bearer ${{ env.TOKEN }}"'
#
##      - name: ZAP Scan
##        uses: zaproxy/action-api-scan@v0.7.0
##        with:
##          token: ${{ secrets.GITHUB_TOKEN }}
##          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
##          format: openapi
##          target: 'https://bscytxzsc3.execute-api.ap-south-1.amazonaws.com/payments/get'
##          cmd_options: '-J report_json.json -w report_md.md -r report_html.html -a'
#
#
#
#      - name: Attach the Test Report To gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test Report
#          path: reports/Pytest_report.html
#
#      - name: Attach the Zap Report To Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test Report
#          path: report_html.html
#
#      - name: test directory
#        run : pwd
#
#      - name : test
#        run : ls
#
#      - name: Attach the Test Logs To Gmail
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test Log
#          path: Logs/test.log
#
#
#      - name: Configure Gmail and Send Email
#        env:
#          GMAIL_USERNAME: ${{secrets.GMAIL_USERNAME}}
#          GMAIL_PASSWORD: ${{secrets.GMAIL_PASSWORD}}
#          RECIPIENT_EMAIL: ${{secrets.RECIPIENT_EMAIL}}  # Replace with the recipient's email
#        run: |
#          python Utilities/send_email_script.py $GMAIL_USERNAME $GMAIL_PASSWORD $RECIPIENT_EMAIL
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#        #
#        #    - name: Send Email Report
#        #      uses: actions/upload-artifact@v2
#        #      with:
#        #        name: Test Report
#        #        path: reports/report.html
#
#
#
#
##      - name: Upload ZAP HTML Report
##        uses: actions/upload-artifact@v2
##        with:
##          name: zap-report-html
##          path: report_html.html
##
##      - name: Configure Gmail and Send Email
##        env:
##          GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
##          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
##          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
##        run: |
##          python Utilities/send_email_script.py $GMAIL_USERNAME $GMAIL_PASSWORD $RECIPIENT_EMAIL
##
#
#
#
#
#
#
#
#
#
#
#
##name: Test and Scan
##
##on:
##  push:
##    branches:
##      - master
##jobs:
##  build:
##    runs-on: ubuntu-latest
##
##    steps:
##    - name: Checkout repository
##      uses: actions/checkout@v3
##    - name: Setup Python
##      uses: actions/setup-python@v4
##      with:
##        python-version: 3.9  # Replace 'x' with your desired Python version
##
##    - name: Install dependencies
##      run: |
##        pip install -r requirements.txt
##
##    - name: test directory
##      run : pwd
##
##    - name : test
##      run : ls
##
##    - name : test1
##      run : cd /home/runner/work/SoundBox_APP/
##
##
###test
##
##    - name: Run Pytest
##
##
##      run: pytest -v -s --capture=tee-sys ./TestScript/Test_app.py --html=./reports/report.html
##
##
##
###test
##
##    - name: Send Email Report
##      uses: actions/upload-artifact@v2
##      with:
##        name: Test Report
##        path: reports/report.html
##
##
##
##    - name: Configure Gmail and Send Email
##      env:
##        GMAIL_USERNAME: ${{secrets.GMAIL_USERNAME}}
##        GMAIL_PASSWORD: ${{secrets.GMAIL_PASSWORD}}
##
##        RECIPIENT_EMAIL: ${{secrets.RECIPIENT_EMAIL}}  # Replace with the recipient's email
##
##      run: |
##        python Utilities/send_email_script.py $GMAIL_USERNAME $GMAIL_PASSWORD $RECIPIENT_EMAIL
##